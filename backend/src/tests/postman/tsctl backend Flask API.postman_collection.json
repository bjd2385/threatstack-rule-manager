{
	"info": {
		"_postman_id": "4ed86603-0944-4c87-9b2e-cfa485b96f33",
		"name": "tsctl backend Flask API",
		"description": "This collection of requests is intended to document the full extend of the methods available to the frontend for data retrieval and actions over the lifecycle of rule and ruleset maintenance within organizations.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "templates",
			"item": [
				{
					"name": "Rules",
					"item": [
						{
							"name": "audit rule",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/templates/rules/audit",
									"host": [
										"{{url}}"
									],
									"path": [
										"templates",
										"rules",
										"audit"
									]
								}
							},
							"response": []
						},
						{
							"name": "cloudtrail rule",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/templates/rules/cloudtrail",
									"host": [
										"{{url}}"
									],
									"path": [
										"templates",
										"rules",
										"cloudtrail"
									]
								}
							},
							"response": []
						},
						{
							"name": "threatintel rule",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/templates/rules/threatintel",
									"host": [
										"{{url}}"
									],
									"path": [
										"templates",
										"rules",
										"threatintel"
									]
								}
							},
							"response": []
						},
						{
							"name": "file rule",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/templates/rules/file",
									"host": [
										"{{url}}"
									],
									"path": [
										"templates",
										"rules",
										"file"
									]
								}
							},
							"response": []
						},
						{
							"name": "winsec rule",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/templates/rules/winsec",
									"host": [
										"{{url}}"
									],
									"path": [
										"templates",
										"rules",
										"winsec"
									]
								}
							},
							"response": []
						},
						{
							"name": "kubernetesAudit rule",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/templates/rules/kubernetesaudit",
									"host": [
										"{{url}}"
									],
									"path": [
										"templates",
										"rules",
										"kubernetesaudit"
									]
								}
							},
							"response": []
						},
						{
							"name": "kubernetesConfig rule",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/templates/rules/kubernetesconfig",
									"host": [
										"{{url}}"
									],
									"path": [
										"templates",
										"rules",
										"kubernetesconfig"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Rulesets",
					"item": [
						{
							"name": "Ruleset",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/templates/ruleset",
									"host": [
										"{{url}}"
									],
									"path": [
										"templates",
										"ruleset"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tags",
					"item": [
						{
							"name": "Tags",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/templates/tags",
									"host": [
										"{{url}}"
									],
									"path": [
										"templates",
										"tags"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Git",
			"item": [
				{
					"name": "Clone",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"directory\": \"~/.threatstack/\",\n    \"gitURL\": \"{{git_url}}\"\n}"
						},
						"url": {
							"raw": "{{url}}/git/clone",
							"host": [
								"{{url}}"
							],
							"path": [
								"git",
								"clone"
							]
						}
					},
					"response": []
				},
				{
					"name": "Push",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/git/push",
							"host": [
								"{{url}}"
							],
							"path": [
								"git",
								"push"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/git/refresh",
							"host": [
								"{{url}}"
							],
							"path": [
								"git",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "Organization Epochs",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/epochs?organization={{org_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"epochs"
							],
							"query": [
								{
									"key": "organization",
									"value": "{{org_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Rules",
			"item": [
				{
					"name": "List rules",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/rule?tags=true&enabled=false&type=file",
							"host": [
								"{{url}}"
							],
							"path": [
								"rule"
							],
							"query": [
								{
									"key": "tags",
									"value": "true"
								},
								{
									"key": "enabled",
									"value": "false"
								},
								{
									"key": "type",
									"value": "file"
								}
							]
						},
						"description": "Acceptable query parameters include\n\n* `rule_id`, to query by or return specific rule IDs;\n* `severity`, to query across the entire organization's locally-cached state by severity;\n* `type`, to query across the entire organization by rule type;\n* `enabled`, to filter returned results from the former parameters by whether or not the rules are enabled; and,\n* `tags`, an additional option (defaults to `false`) a user to can use to select whether or not to return tag data.\n\nAll are optional args, but you cannot filter by more than one of `rule_id`, `severity`, or `type` or you'll receive a returned payload containing an `error` message. \n\n`enabled` can, however, be applied to filter any returned results of the former params, or be used to filter across the entire organization for enabled or disabled rules."
					},
					"response": []
				},
				{
					"name": "Create rule",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ruleset_id\": \"{{ruleset_id}}\",\n    \"data\": [\n        {\n            \"tags\": {},\n            \"rule\": {\n                \"name\": \"Threat Intelligence: Outbound Connection (Connects) to WAN\",\n                \"type\": \"ThreatIntel\",\n                \"title\": \"Threat Intelligence: Outbound Connection (Connects) to WAN: {{threatintel_reason}} to {{ip}}\",\n                \"severityOfAlerts\": 1,\n                \"alertDescription\": \"This alerts when an outbound connection is seen connecting to an IP flagged by our threat intelligence.  Outbound connections could indicate malware callback or a compromised host.  IP and domain reputations change over time, but this should investigated.\",\n                \"aggregateFields\": [\n                    \"threatintel_reason\",\n                    \"ip\"\n                ],\n                \"filter\": \"type =\\\"connect\\\" and event_type=\\\"threatintel\\\"\",\n                \"window\": 3600,\n                \"threshold\": 1,\n                \"suppressions\": [\n                    \"(ip starts_with \\\"10.\\\" OR ip starts_with \\\"192.168.\\\" or ip starts_with \\\"172.16.\\\" or ip starts_with \\\"172.17.\\\" or ip starts_with \\\"172.18.\\\" or ip starts_with \\\"172.19.\\\" or ip starts_with \\\"172.20.\\\" or ip starts_with \\\"172.21.\\\" or ip starts_with \\\"172.22.\\\" or ip starts_with \\\"172.23.\\\" or ip starts_with \\\"172.24.\\\" or ip starts_with \\\"172.25.\\\" or ip starts_with \\\"172.26.\\\" or ip starts_with \\\"172.27.\\\" or ip starts_with \\\"172.28.\\\" or ip starts_with \\\"172.29.\\\" or ip starts_with \\\"172.30.\\\" or ip starts_with \\\"172.31.\\\" or ip starts_with \\\"fd\\\" or ip starts_with \\\"::ffff:10.\\\" OR ip starts_with \\\"::ffff:192.168.\\\" or ip starts_with \\\"::ffff:172.16.\\\" or ip starts_with \\\"::ffff:172.17.\\\" or ip starts_with \\\"::ffff:172.18.\\\" or ip starts_with \\\"::ffff:172.19.\\\" or ip starts_with \\\"::ffff:172.20.\\\" or ip starts_with \\\"::ffff:172.21.\\\" or ip starts_with \\\"::ffff:172.22.\\\" or ip starts_with \\\"::ffff:172.23.\\\" or ip starts_with \\\"::ffff:172.24.\\\" or ip starts_with \\\"::ffff:172.25.\\\" or ip starts_with \\\"::ffff:172.26.\\\" or ip starts_with \\\"::ffff:172.27.\\\" or ip starts_with \\\"::ffff:172.28.\\\" or ip starts_with \\\"::ffff:172.29.\\\" or ip starts_with \\\"::ffff:172.30.\\\" or ip starts_with \\\"::ffff:172.31.\\\" or ip starts_with \\\"fd\\\")\",\n                    \"port = 0\"\n                ],\n                \"enabled\": true\n            }\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{url}}/rule",
							"host": [
								"{{url}}"
							],
							"path": [
								"rule"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete rule",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/rule?rule_id=4c1892a8-320f-46e7-8709-472cf6740788-localonly",
							"host": [
								"{{url}}"
							],
							"path": [
								"rule"
							],
							"query": [
								{
									"key": "rule_id",
									"value": "4c1892a8-320f-46e7-8709-472cf6740788-localonly"
								}
							]
						},
						"description": "`rule_id` is a required field, and multiple `rule_id`s can be specified.\n\nReturns the plan, once a rule has been deleted."
					},
					"response": []
				},
				{
					"name": "Update rule",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{url}}/rule",
							"host": [
								"{{url}}"
							],
							"path": [
								"rule"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Rulesets",
			"item": [
				{
					"name": "Create ruleset",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"\",\n    \"description\": \"\",\n    \"ruleIds\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/ruleset",
							"host": [
								"{{url}}"
							],
							"path": [
								"ruleset"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a ruleset",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/ruleset?ruleset_id={{ruleset_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"ruleset"
							],
							"query": [
								{
									"key": "ruleset_id",
									"value": "{{ruleset_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List rulesets",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/ruleset",
							"host": [
								"{{url}}"
							],
							"path": [
								"ruleset"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update ruleset",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{url}}/ruleset",
							"host": [
								"{{url}}"
							],
							"path": [
								"ruleset"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "State",
			"item": [
				{
					"name": "Get workspace",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/workspace",
							"host": [
								"{{url}}"
							],
							"path": [
								"workspace"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get plan",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/plan",
							"host": [
								"{{url}}"
							],
							"path": [
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set workspace",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"workspace\": \"{{org_id}}\"\n}"
						},
						"url": {
							"raw": "{{url}}/workspace",
							"host": [
								"{{url}}"
							],
							"path": [
								"workspace"
							]
						},
						"description": "Set `workspace` in the state file. This is the default organization within which state changes are made, unless copying rules or rulesets out of the current workspace.\n\nIf the organization's directory does not already exist in the state directory, this request can take a few minutes to complete as the backend refreshes. Otherwise, the workspace is modified to point at the existing directory (no refresh). An explicit `/refresh` call would have to be made to update the contents of the organization's local state."
					},
					"response": []
				},
				{
					"name": "Refresh",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"organizations\": [\n        \"{{org_id}}\",\n        \"{{alt_org_id}}\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/refresh",
							"host": [
								"{{url}}"
							],
							"path": [
								"refresh"
							]
						},
						"description": "Refresh the local state on a single- or list of organizations."
					},
					"response": []
				},
				{
					"name": "Push",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"organizations\": [\n        \"{{org_id}}\",\n        \"{{alt_org_id}}\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/push",
							"host": [
								"{{url}}"
							],
							"path": [
								"push"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Copying Rules, Rule Tags, and Rulesets",
			"item": [
				{
					"name": "Copy rule, ruleset, and tags to a different destination organization",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"destination_organization\": \"\",\n    \"rules\": [\n        {\n            \"rule_id\": \"{{rule_id}}\",\n            \"rule_postfix\": \" - COPY\"\n        }\n    ],\n    \"rulesets\": [\n        {\n            \"ruleset_id\": \"{{ruleset_id}}\",\n            \"ruleset_postfix\": \" - COPY\"\n        }\n    ],\n    \"tags\": [\n        {\n            \"src_rule_id\": \"{{rule_id}}\",\n            \"dst_ruleset_id\": \"{{alt_ruleset_id}}\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/copy",
							"host": [
								"{{url}}"
							],
							"path": [
								"copy"
							]
						}
					},
					"response": []
				},
				{
					"name": "Copy ruleset",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"destination_organization\": \"{{alt_org_id}}\",\n    \"rulesets\": [\n        {\n            \"ruleset_id\": \"{{ruleset_id}}\",\n            \"ruleset_name_postfix\": \" - COPY\"\n        }\n    ],\n    \"rules\": [],\n    \"tags\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/copy",
							"host": [
								"{{url}}"
							],
							"path": [
								"copy"
							]
						}
					},
					"response": []
				},
				{
					"name": "Copy rule",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"destination_organization\": \"\",\n    \"rules\": [\n        {\n            \"rule_id\": \"\",\n            \"rule_postfix\": \"\"\n        }\n    ],\n    \"rulesets\": [],\n    \"tags\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/copy",
							"host": [
								"{{url}}"
							],
							"path": [
								"copy"
							]
						}
					},
					"response": []
				},
				{
					"name": "Copy tags from one rule to another organization",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"destination_organization\": \"{{destination_organization}}\",\n    \"tags\": [\n        {\n            \"src_rule_id\": \"\",\n            \"dst_rule_id\": \"\"\n        },\n        {\n            \"src_rule_id\": \"\",\n            \"dst_ruleset_id\": \"\"\n        }\n    ],\n    \"rulesets\": [],\n    \"rules\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/copy",
							"host": [
								"{{url}}"
							],
							"path": [
								"copy"
							]
						}
					},
					"response": []
				}
			],
			"description": "The `/copy` endpoint can be used to copy entire rulesets, rules, or tags intra- or extra-organization (e.g. between two organizations)."
		},
		{
			"name": "Tags",
			"item": [
				{
					"name": "Update tags",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{url}}/rule/tags",
							"host": [
								"{{url}}"
							],
							"path": [
								"rule",
								"tags"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Version",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/version",
					"host": [
						"{{url}}"
					],
					"path": [
						"version"
					]
				},
				"description": "Return the backend version."
			},
			"response": []
		}
	]
}